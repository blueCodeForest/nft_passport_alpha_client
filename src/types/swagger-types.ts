/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_getHello"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contracts/{id}/ranking": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** NFT保有ランキング取得 */
        get: operations["ContractController_getNFTHolderRanking"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contracts/{chainId}/{contractAddress}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** コントラクトカバー情報取得 */
        get: operations["ContractController_getContractCover"];
        put?: never;
        /** ミントリクエスト */
        post: operations["ContractController_mint"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contracts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** コントラクト情報取得 */
        get: operations["ContractController_getContractWithStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/passports/by-wallet": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 保有パスポート一覧取得 */
        get: operations["PassportController_getPassportsWithOwnerStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/passports/by-contract": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** コントラクトIDからパスポート一覧取得 */
        get: operations["PassportController_getPassportsByContractId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/passports/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** パスポート情報取得 */
        get: operations["PassportController_getPassport"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rewards/exchange": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 特典交換 */
        post: operations["RewardController_exchangeReward"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 特典一覧 */
        get: operations["RewardController_getRewards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/histories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ヒストリー一覧取得 */
        get: operations["HistoryController_getHistories"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/nfts/{contractId}/balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** NFT保有量取得 */
        get: operations["NFTController_getNFTBalance"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/nfts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 保有NFT一覧取得 */
        get: operations["NFTController_getNFTsByWalletAddress"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        NFTHolderRankDto: {
            /** @description ランク */
            rank: number;
            /** @description ウォレットアドレス */
            walletAddress: string;
            /** @description 保有数 */
            holdings: number;
        };
        PaginationDto: {
            /** @description 総アイテム数 */
            totalCount: number;
            /** @description 現在のページ番号 */
            currentPage: number;
            /** @description 1ページあたりのアイテム数 */
            perPage: number;
            /** @description 次のページがあるかどうか */
            hasNextPage: boolean;
            /** @description 前のページがあるかどうか */
            hasPrevPage: boolean;
            /** @description 総ページ数 */
            totalPages: number;
        };
        NFTHolderRankingDto: {
            holders: components["schemas"]["NFTHolderRankDto"][];
            pagination: components["schemas"]["PaginationDto"];
        };
        GetNFTHolderRankingResponseDto: {
            ranking: components["schemas"]["NFTHolderRankingDto"];
            pagination: components["schemas"]["PaginationDto"];
        };
        /** @enum {string} */
        ContractType: "coin" | "stamp";
        GetContractCoverResponseDto: {
            /** @description コレクション名 */
            name: string;
            /** @description カバー画像URL */
            imageUrl: string;
            /** @description コントラクトタイプ */
            type: components["schemas"]["ContractType"];
        };
        AttributeDto: {
            /** @description 属性名 */
            trait_type: string;
            /** @description 属性値 */
            value: string;
        };
        MetadataDto: {
            /** @description 名前 */
            name: string;
            /** @description 画像URL */
            imageUrl: string;
            /** @description 説明 */
            description: string;
            /** @description 属性 */
            attributes: components["schemas"]["AttributeDto"][];
        };
        ContractWithMetadataDto: {
            /** @description コントラクトID */
            id: number;
            /** @description チェーンID */
            chainId: number;
            /** @description コントラクトアドレス */
            contractAddress: string;
            /** @description シンボル */
            symbol: string;
            /** @description コントラクトタイプ */
            type: components["schemas"]["ContractType"];
            metadata: components["schemas"]["MetadataDto"];
        };
        ContractStatsDto: {
            /** @description 総発行量 */
            totalSupply: number;
            /** @description 保有者数 */
            holderCount: number;
            /** @description 総バーン量 */
            totalBurned: number;
        };
        GetContractWithStatsResponseDto: {
            contract: components["schemas"]["ContractWithMetadataDto"];
            stats: components["schemas"]["ContractStatsDto"];
        };
        MintRequestDto: {
            /**
             * @description ミント認証キー
             * @example 123...
             */
            mintAuthKey: string;
            /**
             * @description ウォレットアドレス
             * @example 0x123...
             */
            walletAddress: string;
        };
        MintResponseDto: {
            /**
             * @description ID
             * @example 1
             */
            id: number;
            /**
             * @description チェーンID
             * @example 137
             */
            chainId: number;
            /**
             * @description コントラクトアドレス
             * @example 0x123...
             */
            contractAddress: string;
            /**
             * @description ウォレットアドレス
             * @example 0x123...
             */
            walletAddress: string;
            /**
             * Format: date-time
             * @description 作成日時
             * @example 2024-01-01T00:00:00.000Z
             */
            createdAt: string;
        };
        BrandPassportStatsDto: {
            /** @description ランク */
            rank: number;
            /** @description コインを所有してる総ウォレット数 */
            totalHolders: number;
            /** @description 保有コイン数 */
            holdingCoins: number;
        };
        BrandPassportWithOwnerStatstDto: {
            /** @description パスポートID */
            id: number;
            /**
             * @description パスポートタイプ
             * @enum {string}
             */
            type: "brand";
            /** @description パスポート名 */
            name: string;
            /** @description パスポート画像URL */
            imageUrl: string;
            /** @description パスポート統計情報 */
            stats: components["schemas"]["BrandPassportStatsDto"];
            /** @description コインシンボル */
            contractSymbol: string;
        };
        CollectionPassportStatsDto: {
            /** @description 保有スタンプ数 */
            holdingStamps: number;
            /** @description パスポートの総スタンプ数 */
            totalStamps: number;
        };
        CollectionPassportWithOwnerStatstDto: {
            /** @description パスポートID */
            id: number;
            /**
             * @description パスポートタイプ
             * @enum {string}
             */
            type: "collection";
            /** @description パスポート名 */
            name: string;
            /** @description パスポート画像URL */
            imageUrl: string;
            /** @description パスポート統計情報 */
            stats: components["schemas"]["CollectionPassportStatsDto"];
        };
        GetPassportsWithOwnerStatsResponseDto: {
            /** @description パスポート一覧 */
            passports: (components["schemas"]["BrandPassportWithOwnerStatstDto"] | components["schemas"]["CollectionPassportWithOwnerStatstDto"])[];
        };
        PassportBaseDto: {
            /** @description パスポートID */
            id: number;
            /**
             * @description パスポートタイプ
             * @enum {string}
             */
            type: "brand" | "collection";
            /** @description パスポート名 */
            name: string;
            /** @description パスポート画像URL */
            imageUrl: string;
        };
        GetPassportByContractIdResponseDto: {
            passports: components["schemas"]["PassportBaseDto"][];
        };
        PassportDto: {
            /** @description パスポートID */
            id: number;
            /**
             * @description パスポートタイプ
             * @enum {string}
             */
            type: "brand" | "collection";
            /** @description パスポート名 */
            name: string;
            /** @description パスポート画像URL */
            imageUrl: string;
            /** @description 発行者 */
            issuer: string;
            /** @description 説明 */
            description: string;
            /** @description HP */
            hp: string;
            /** @description X */
            x: string;
            /** @description インスタグラム */
            instagram: string;
            /** @description LINE */
            line: string;
        };
        GetPassportResponseDto: {
            passport: components["schemas"]["PassportDto"];
        };
        ExchangeRewardRequestDto: {
            /** @description 特典ID */
            id: number;
            /** @description ウォレットアドレス */
            walletAddress: string;
            /** @description 署名 */
            sig: string;
        };
        ExchangeRewardResponseDto: {
            /** @description 特典ID */
            id: number;
            /** @description ウォレットアドレス */
            walletAddress: string;
            /** @description ステータス */
            status: string;
        };
        TokenQuantityRewardConditionDto: {
            /** @description コントラクトID */
            contractId: number;
            /** @description 必要トークン量 */
            cost: number;
        };
        TokenQuantityRewardDto: {
            /** @description 特典ID */
            id: number;
            /** @description 特典名 */
            name: string;
            /**
             * @description 特典タイプ
             * @enum {string}
             */
            type: "tokenQuantity";
            /** @description 詳細な説明 */
            description?: string;
            /** @description 複数回交換可能か */
            oneTimeOnly: boolean;
            /**
             * Format: date-time
             * @description 交換期限
             */
            exchangeDeadline: string;
            condition: components["schemas"]["TokenQuantityRewardConditionDto"];
        };
        TokenVarietyRewardConditionDto: {
            /** @description 必須コントラクトID */
            requiredContractIds: number[];
            /** @description オプションコントラクトID */
            optionalContractIds: number[];
            /** @description 最小種類数 */
            minimumVarietyCount: number;
        };
        TokenVarietyRewardDto: {
            /** @description 特典ID */
            id: number;
            /** @description 特典名 */
            name: string;
            /**
             * @description 特典タイプ
             * @enum {string}
             */
            type: "tokenVariety";
            /** @description 詳細な説明 */
            description?: string;
            /** @description 複数回交換可能か */
            oneTimeOnly: boolean;
            /**
             * Format: date-time
             * @description 交換期限
             */
            exchangeDeadline: string;
            condition: components["schemas"]["TokenVarietyRewardConditionDto"];
        };
        GetRewardsResponseDto: {
            rewards: (components["schemas"]["TokenQuantityRewardDto"] | components["schemas"]["TokenVarietyRewardDto"])[];
            /** @description 総特典数 */
            totalCount: number;
        };
        ContractBasicInfoDto: {
            /** @description コントラクトID */
            id: number;
            /** @description チェーンID */
            chainId: number;
            /** @description コントラクトアドレス */
            contractAddress: string;
            /** @description シンボル */
            symbol: string;
            /** @description コントラクトタイプ */
            type: components["schemas"]["ContractType"];
        };
        NFTWithQuantityDto: {
            metadata: components["schemas"]["MetadataDto"];
            quantity: number;
        };
        MintHistoryDto: {
            /** @description ヒストリーID */
            id: string;
            /** @description ウォレットアドレス */
            walletAddress: string;
            /**
             * @description ヒストリータイプ
             * @enum {string}
             */
            historyType: "mint";
            passport: components["schemas"]["PassportBaseDto"];
            /**
             * Format: date-time
             * @description 日時
             */
            createdAt: string;
            contract: components["schemas"]["ContractBasicInfoDto"];
            nft: components["schemas"]["NFTWithQuantityDto"];
        };
        TokenQuantityRewardHistoryDto: {
            /** @description ヒストリーID */
            id: string;
            /** @description ウォレットアドレス */
            walletAddress: string;
            /**
             * @description ヒストリータイプ
             * @enum {string}
             */
            historyType: "reward";
            passport: components["schemas"]["PassportBaseDto"];
            /**
             * Format: date-time
             * @description 日時
             */
            createdAt: string;
            /** @enum {string} */
            rewardType: "tokenQuantity";
            reward: components["schemas"]["TokenQuantityRewardDto"];
            contract: components["schemas"]["ContractBasicInfoDto"];
        };
        TokenVarietyRewardHistoryDto: {
            /** @description ヒストリーID */
            id: string;
            /** @description ウォレットアドレス */
            walletAddress: string;
            /**
             * @description ヒストリータイプ
             * @enum {string}
             */
            historyType: "reward";
            passport: components["schemas"]["PassportBaseDto"];
            /**
             * Format: date-time
             * @description 日時
             */
            createdAt: string;
            /** @enum {string} */
            rewardType: "tokenVariety";
            reward: components["schemas"]["TokenVarietyRewardDto"];
        };
        GetHistoriesResponseDto: {
            histories: (components["schemas"]["MintHistoryDto"] | components["schemas"]["TokenQuantityRewardHistoryDto"] | components["schemas"]["TokenVarietyRewardHistoryDto"])[];
            pagination: components["schemas"]["PaginationDto"];
        };
        GetNFTBalanceResponseDto: {
            /**
             * @description NFT保有量
             * @example 5
             */
            balance: number;
        };
        NFTWithContractDto: {
            metadata: components["schemas"]["MetadataDto"];
            quantity: number;
            /** @description コントラクト情報 */
            contract: components["schemas"]["ContractBasicInfoDto"];
        };
        GetNFTsByWalletAddressResponseDto: {
            nfts: components["schemas"]["NFTWithContractDto"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AppController_getHello: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ContractController_getNFTHolderRanking: {
        parameters: {
            query: {
                /** @description ページ */
                page: number;
                /** @description ページあたりのアイテム数 */
                perPage: number;
            };
            header?: never;
            path: {
                /** @description コントラクトID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": components["schemas"]["GetNFTHolderRankingResponseDto"];
                };
            };
            /** @description 無効なリクエスト */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description コントラクトが存在しない */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ContractController_getContractCover: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description チェーンID */
                chainId: number;
                /** @description コントラクトアドレス */
                contractAddress: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": components["schemas"]["GetContractCoverResponseDto"];
                };
            };
            /** @description 無効なリクエスト */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description コントラクトが存在しない */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ContractController_mint: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description チェーンID */
                chainId: number;
                /** @description コントラクトアドレス */
                contractAddress: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MintRequestDto"];
            };
        };
        responses: {
            /** @description 成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": components["schemas"]["MintResponseDto"];
                };
            };
            /** @description 無効なリクエスト */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ContractController_getContractWithStats: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description コントラクトID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": components["schemas"]["GetContractWithStatsResponseDto"];
                };
            };
            /** @description 無効なリクエスト */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description コントラクトが存在しない */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PassportController_getPassportsWithOwnerStats: {
        parameters: {
            query: {
                /** @description ウォレットアドレス */
                wa: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": components["schemas"]["GetPassportsWithOwnerStatsResponseDto"];
                };
            };
            /** @description 無効なリクエスト */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PassportController_getPassportsByContractId: {
        parameters: {
            query: {
                /** @description コントラクトID */
                cid: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": components["schemas"]["GetPassportByContractIdResponseDto"];
                };
            };
            /** @description 無効なリクエスト */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PassportController_getPassport: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description パスポートID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": components["schemas"]["GetPassportResponseDto"];
                };
            };
            /** @description 無効なリクエスト */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RewardController_exchangeReward: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExchangeRewardRequestDto"];
            };
        };
        responses: {
            /** @description 成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": components["schemas"]["ExchangeRewardResponseDto"];
                };
            };
            /** @description 無効なリクエスト */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RewardController_getRewards: {
        parameters: {
            query: {
                /** @description パスポートID */
                pid: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": components["schemas"]["GetRewardsResponseDto"];
                };
            };
            /** @description 無効なリクエスト */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    HistoryController_getHistories: {
        parameters: {
            query: {
                /** @description ウォレットアドレス */
                wa: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": components["schemas"]["GetHistoriesResponseDto"];
                };
            };
            /** @description 無効なリクエスト */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    NFTController_getNFTBalance: {
        parameters: {
            query: {
                /** @description ウォレットアドレス */
                wa: string;
            };
            header?: never;
            path: {
                /** @description コントラクトID */
                contractId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": components["schemas"]["GetNFTBalanceResponseDto"];
                };
            };
            /** @description 無効なリクエスト */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description コントラクトが見つかりません */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    NFTController_getNFTsByWalletAddress: {
        parameters: {
            query: {
                /** @description コォレットアドレス */
                wa: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json; charset=utf-8": components["schemas"]["GetNFTsByWalletAddressResponseDto"];
                };
            };
            /** @description 無効なリクエスト */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description コントラクトが存在しない */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
